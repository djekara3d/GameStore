@using Models




@* <!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#DeleteModal">
Launch demo modal
</button> *@

<!-- Modal -->
<div class="modal fade" id="DeleteModal" tabindex="-1" aria-labelledby="DeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="DeleteModalLabel">@title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                    @onclick="@Cancel">Cancel</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                    @onclick="@Confirm">Delete</button>
            </div>
        </div>
    </div>
</div>








@code {
    [Parameter]
    public Game? Game { get; set; }
    private string title = string.Empty;
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }



    protected override void OnParametersSet()
    {
        title = $"Delete {Game?.Name}?";
        base.OnParametersSet();
    }

    private void Confirm()
    {
        OnClose.InvokeAsync(true);
    }
    private void Cancel()
    {
        OnClose.InvokeAsync(false);
    }


    /*Confirm i Cancel nam omogucuje komunikaciju izmedju komponente DeleteGame i Index.html, brisanje ce se vrsiti na
    indexu i zato nam treba callback */

}
